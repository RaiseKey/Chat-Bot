import tkinter as tk
from tkinter import scrolledtext
import re

def get_dynamic_response(user_input):
    responses = [
        (re.compile(r'\b(hallo|hi|guten tag|hey)\b', re.IGNORECASE), "Hallo! Wie kann ich Ihnen helfen?"),
        (re.compile(r'login|passwort|anmeldung|konto|zugang', re.IGNORECASE), "Haben Sie versucht, Ihr Passwort mithilfe der Passwort-Vergessen-Funktion zurückzusetzen? Falls Sie weiterhin Probleme haben, leite ich das Anliegen an unsere höhere technische Abteilung weiter."),
        (re.compile(r'software|app|programm|installation|update|fehler', re.IGNORECASE), "Können Sie mir bitte mehr Details zu dem Problem geben? Zum Beispiel, welche Software betroffen ist und welche Fehlermeldung angezeigt wird."),
        (re.compile(r'hardware|gerät|pc|drucker|scanner|usb', re.IGNORECASE), "Prüfen Sie bitte, ob das Gerät eingeschaltet und korrekt angeschlossen ist. Falls das Problem weiterhin besteht, müssen wir eventuell einen Techniker hinzuziehen."),
        (re.compile(r'netzwerk|internet|verbindung|router|wlan', re.IGNORECASE), "Ist Ihre Netzwerkverbindung stabil? Haben Sie den Router neu gestartet? Falls das Problem weiterhin besteht, kontaktieren Sie bitte Ihren Internetanbieter."),
        (re.compile(r'email|e-mail|postfach|outlook|smtp|imap|server', re.IGNORECASE), "Prüfen Sie bitte, ob Ihre Postfach-Einstellungen korrekt sind. Falls Sie keinen Zugriff haben, wenden Sie sich an Ihren Administrator bezüglich der Zugangsdaten, wie Passwort und Benutzername. Falls Sie Zugriff haben, aber keine E-Mail abrufen und verschicken können, kann es sein, dass eine IP-Sperre vorliegt. Gerne kann ich diese für Sie aufheben. Bitte teilen Sie mir hierzu Ihre aktuelle ipv4 mit. Mithilfe Ihrer IP können wir im Log nachvollziehen, weshalb diese IP-Sperre aufgetreten ist. Meist liegt dies an fehlerhaften Servereinstellungen. Zur Überprüfung bitte ich Sie, dass Sie mir Ihre Servereinstellungen zuschicken."),
        (re.compile(r'drucker|druck|papier|toner', re.IGNORECASE), "Ist der Drucker eingeschaltet und mit dem Netzwerk verbunden? Prüfen Sie bitte auch, ob ausreichend Papier vorhanden ist. Teilen Sie mir ansonsten gerne genauere Informationen mit, damit ich Ihnen zielführend helfen kann."),
        (re.compile(r'sicherheits|virus|malware|hacker|phishing', re.IGNORECASE), "Falls Sie den Verdacht auf einen Sicherheitsvorfall haben, trennen Sie Ihr Gerät vom Netzwerk und informieren Sie umgehend einen Sicherheitsexperten."),
        (re.compile(r'backup|sicherung|datenverlust|wiederherstellung', re.IGNORECASE), "Haben Sie versucht, ein Backup wiederherzustellen? Falls kein Backup vorhanden ist, können wir Ihnen ein Backup einspielen. Hierbei entstehen Kosten in der Höhe von 1€ je angefangene Minute."),
        (re.compile(r'privat|persönlich|spiel|unterhaltung|streaming', re.IGNORECASE), "Leider können wir keine Unterstützung für private oder nicht-arbeitsbezogene Anliegen bieten."),
        (re.compile(r'\b(fehler|problem|störung|hilfe)\b', re.IGNORECASE), "Könnten Sie mir bitte mehr Informationen geben? Was genau funktioniert nicht oder welche Fehlermeldung wird angezeigt?"),
        (re.compile(r'\b(danke|vielen dank|dankeschön)\b', re.IGNORECASE), "Sehr gerne! Kann ich Ihnen ansonsten noch anderweitig behilflich sein?"),
        (re.compile(r'\b(wie|was|warum|kann|frage)\b', re.IGNORECASE), "Damit ich Ihr Anliegen/Ihre Frage genauer analysieren kann, benötige ich weitere Informationen."),
        (re.compile(r'\b(vertrag|verträge|kündigung|geld|bezahlungen|bezahlen|paket|tarif)\b', re.IGNORECASE), "Falls Sie Fragen bezüglich Ihres Tarifs/Ihrer Rechnungen haben, wenden Sie sich bitte an unsere Buchhaltung. Unsere Buchhaltung erreichen Sie per E-Mail unter der E-Mail-Adresse buchhaltung@itsupport.de")
    ]

    for pattern, response in responses:
        if pattern.search(user_input):
            return response

    return "Vielen Dank für die Details. Ich werde mein Bestes tun, Ihnen zu helfen! Bitte beschreiben Sie Ihr Problem genauer!"

def send_message():
    user_input = entry.get().strip().lower()
    if user_input:
        chat_window.configure(state='normal')
        chat_window.insert(tk.END, "Sie: " + user_input + "\n", "user")
        response = get_dynamic_response(user_input)
        chat_window.insert(tk.END, "Bot: " + response + "\n", "bot")
        chat_window.configure(state='disabled')
        chat_window.yview(tk.END)
        entry.delete(0, tk.END)

def close_window():
    root.destroy()

# Create a rounded rectangle function
def round_rectangle(canvas, x1, y1, x2, y2, radius=25, **kwargs):
    points = [x1+radius, y1,
              x1+radius, y1,
              x2-radius, y1,
              x2-radius, y1,
              x2, y1,
              x2, y1+radius,
              x2, y1+radius,
              x2, y2-radius,
              x2, y2-radius,
              x2, y2,
              x2-radius, y2,
              x2-radius, y2,
              x1+radius, y2,
              x1+radius, y2,
              x1, y2,
              x1, y2-radius,
              x1, y2-radius,
              x1, y1+radius,
              x1, y1+radius,
              x1, y1]
    return canvas.create_polygon(points, **kwargs, smooth=True)

# GUI setup
root = tk.Tk()
root.title("IT-Support-Chatbot")
root.geometry("400x600")
root.configure(bg='#ECE5DD')

# Configure the chat window inside a Canvas to allow rounded corners
canvas = tk.Canvas(root, bg='#ECE5DD', highlightthickness=0)
canvas.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

chat_frame = tk.Frame(canvas, bg='#FFFFFF')
chat_frame_id = round_rectangle(canvas, 10, 10, 390, 490, radius=20, fill="#FFFFFF")
canvas.create_window((200, 250), window=chat_frame)

chat_window = scrolledtext.ScrolledText(chat_frame, wrap=tk.WORD, state='disabled', bg='#FFFFFF', fg='#000000', font=('Helvetica', 12), padx=10, pady=10, width=40, height=20, bd=0, highlightthickness=0)
chat_window.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
chat_window.tag_configure("user", foreground="#0000FF", font=("Helvetica", 12, "bold"), lmargin1=10, lmargin2=10)
chat_window.tag_configure("bot", foreground="#008000", font=("Helvetica", 12), lmargin1=10, lmargin2=10)

# Frame for entry and buttons
entry_frame = tk.Frame(root, bg='#ECE5DD')
entry_frame.pack(fill=tk.X, padx=10, pady=5)

entry = tk.Entry(entry_frame, bg='#FFFFFF', fg='#000000', font=('Helvetica', 12), relief='flat')
entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
entry.bind("<Return>", lambda event: send_message())

send_button = tk.Button(entry_frame, text="Senden", command=send_message, bg='#075E54', fg='#FFFFFF', font=('Helvetica', 12), relief='flat')
send_button.pack(side=tk.RIGHT)

exit_button = tk.Button(root, text="Exit", command=close_window, bg='#E53935', fg='#FFFFFF', font=('Helvetica', 12), relief='flat')
exit_button.pack(pady=5)

# Initial chat messages
chat_window.configure(state='normal')
chat_window.insert(tk.END, "Bot: Willkommen beim IT-Support-Chatbot. Wie kann ich Ihnen helfen?\n", "bot")
chat_window.insert(tk.END, "Bot: Bitte beschreiben Sie Ihr Problem so genau wie möglich.\n", "bot")
chat_window.configure(state='disabled')

root.mainloop()
